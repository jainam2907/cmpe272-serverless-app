service: student-api

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: 
        - "arn:aws:dynamodb:us-east-1:*:table/StudentRecords"

plugins:
  - serverless-dynamodb
  - serverless-offline

custom:
  stages:
    offline:
      environment: local
      endpoint: http://localhost:3000
    dev:
      environment: aws
      endpoint: https://${self:provider.region}.execute-api.amazonaws.com/dev

  dynamodb:
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
    staged:
      - offline
      - dev

functions:
  studentHandler:
    handler: handler.lambda_handler
    events:
      - http:
          path: students
          method: post
      - http:
          path: students
          method: get
          request:
            parameters:
              querystrings:
                student_id: true

resources:
  Resources:
    StudentRecords:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: StudentRecords
        AttributeDefinitions:
          - AttributeName: student_id
            AttributeType: S
        KeySchema:
          - AttributeName: student_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
